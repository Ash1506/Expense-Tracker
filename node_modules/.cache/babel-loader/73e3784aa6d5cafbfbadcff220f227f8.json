{"ast":null,"code":"var _jsxFileName = \"G:\\\\Courses\\\\React\\\\01-starting-setup\\\\src\\\\Components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState(''); //So that the value would be stored even after re evluation of the component.\n\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); // const [userInput,setUserInput]=useState({\n  //     enteredTitle:'',\n  //     enteredAmount:'',           //Making one state by using objects\n  //     enteredDate:'',\n  // });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); //For getting input value\n    // setUserInput({\n    //     ...userInput,               //Copies all the key value pairs and then added into this object. If we don't write this line, then the updated object would e of 1 key-value pair i.e. both enteredAmount and enteredDate data would get lost.\n    //     enteredTitle:event.target.value, //enteredTitle value would get replaced by new value\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enteredAmount:event.target.value,\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value); //Also, event.target.value returns value as string\n    // setUserInput({\n    //     ...userInput,\n    //     enteredDate:event.target.value,\n    // });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); //To avoid refreshing of page while clicking the button\n\n    const expenseData = {\n      //Storing the values in an object\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate)\n    }; //console.log(expenseData);\n\n    props.onSaveExpenseData(expenseData); //Passing the expenseData to the onSaveExpenseData function present in NewExpense component.\n\n    setEnteredTitle(''); //To clear the i/p fields after clicking the submit button.\n\n    setEnteredAmount('');\n    setEnteredDate('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"sPl3hHJ0hPqwAiAS86pYldA5b1E=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["G:/Courses/React/01-starting-setup/src/Components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","onCancel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './ExpenseForm.css';\r\n\r\nconst ExpenseForm = (props) => {\r\n    const [enteredTitle,setEnteredTitle]=useState(''); //So that the value would be stored even after re evluation of the component.\r\n    const [enteredAmount,setEnteredAmount]=useState('');\r\n    const [enteredDate,setEnteredDate]=useState('');\r\n    // const [userInput,setUserInput]=useState({\r\n    //     enteredTitle:'',\r\n    //     enteredAmount:'',           //Making one state by using objects\r\n    //     enteredDate:'',\r\n    // });\r\n    const titleChangeHandler = (event) =>{\r\n        setEnteredTitle(event.target.value); //For getting input value\r\n        // setUserInput({\r\n        //     ...userInput,               //Copies all the key value pairs and then added into this object. If we don't write this line, then the updated object would e of 1 key-value pair i.e. both enteredAmount and enteredDate data would get lost.\r\n        //     enteredTitle:event.target.value, //enteredTitle value would get replaced by new value\r\n        // });\r\n    };\r\n    const amountChangeHandler = (event) =>{\r\n        setEnteredAmount(event.target.value); \r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredAmount:event.target.value,\r\n        // });\r\n    };\r\n    const dateChangeHandler = (event) =>{\r\n        setEnteredDate(event.target.value); //Also, event.target.value returns value as string\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredDate:event.target.value,\r\n        // });\r\n    };\r\nconst submitHandler=(event)=>{\r\n    event.preventDefault();  //To avoid refreshing of page while clicking the button\r\n\r\n    const expenseData={      //Storing the values in an object\r\n        title:enteredTitle,\r\n        amount: +enteredAmount,\r\n        date: new Date(enteredDate)\r\n    };\r\n    //console.log(expenseData);\r\n    props.onSaveExpenseData(expenseData); //Passing the expenseData to the onSaveExpenseData function present in NewExpense component.\r\n    setEnteredTitle('');    //To clear the i/p fields after clicking the submit button.\r\n    setEnteredAmount('');\r\n    setEnteredDate('');\r\n};\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className='new-expense__controls'>\r\n                <div className='new-expense__control'>\r\n                    <label>Title</label>\r\n                    <input type='text' value={enteredTitle} onChange={titleChangeHandler}/>\r\n                </div>\r\n                <div className='new-expense__control'>\r\n                    <label>Amount</label>\r\n                    <input type='number' min='0.01' step='0.01' value={enteredAmount} onChange={amountChangeHandler}/>\r\n                </div>\r\n                <div className='new-expense__control'>\r\n                    <label>Date</label>\r\n                    <input type='date' min=\"2019-01-01\" max=\"2022-12-31\" value={enteredDate} onChange={dateChangeHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"new-expense__actions\">\r\n                <button type='button' onClick={props.onCancel}>Cancel</button>\r\n                <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}